Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <!-- Base application theme. -->\r\n    <style name=\"Base.Theme.MyProject\" parent=\"Theme.AppCompat.Light.NoActionBar\">\r\n        <!-- Customize your light theme here. -->\r\n        <!-- <item name=\"colorPrimary\">@color/my_light_primary</item> -->\r\n\r\n        <item name=\"android:windowActivityTransitions\">true</item>\r\n        <!-- Specify enter and exit transitions -->\r\n        <item name=\"android:windowEnterTransition\">@transition/slide_left</item>\r\n        <item name=\"android:windowExitTransition\">@transition/slide_left</item>\r\n        <!-- Specify shared element transitions -->\r\n        <item name=\"android:windowSharedElementEnterTransition\">@transition/change_image_transform</item>\r\n        <item name=\"android:windowSharedElementExitTransition\">@transition/change_image_transform</item>\r\n\r\n\r\n    </style>\r\n\r\n    <style name=\"Theme.MyProject\" parent=\"Base.Theme.MyProject\" />\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
--- a/app/src/main/res/values/themes.xml	(revision 4f32134f9d065f134fdd6ae23fac2e1054cc162b)
+++ b/app/src/main/res/values/themes.xml	(date 1710235816577)
@@ -7,7 +7,7 @@
         <item name="android:windowActivityTransitions">true</item>
         <!-- Specify enter and exit transitions -->
         <item name="android:windowEnterTransition">@transition/slide_left</item>
-        <item name="android:windowExitTransition">@transition/slide_left</item>
+        <item name="android:windowExitTransition">@transition/slide_right</item>
         <!-- Specify shared element transitions -->
         <item name="android:windowSharedElementEnterTransition">@transition/change_image_transform</item>
         <item name="android:windowSharedElementExitTransition">@transition/change_image_transform</item>
Index: app/src/main/java/com/project/myproject/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.myproject\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.TextView\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        val nameField = findViewById<TextView>(R.id.name)\r\n\r\n        val extras = intent.extras\r\n        if (extras != null) {\r\n            var name = extras.getString(\"email\")\r\n            if (name != null) {\r\n                name = name.substring(0, name.indexOf('@'))\r\n\r\n                val splittedName = name.split('.')\r\n                    .map { it.replaceFirstChar { char -> char.uppercaseChar() } }\r\n\r\n                val nameText = getString(R.string.name_placeholder, \"${splittedName[0]} ${splittedName[1]}\")\r\n                nameField.text = nameText\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/project/myproject/MainActivity.kt b/app/src/main/java/com/project/myproject/MainActivity.kt
--- a/app/src/main/java/com/project/myproject/MainActivity.kt	(revision 4f32134f9d065f134fdd6ae23fac2e1054cc162b)
+++ b/app/src/main/java/com/project/myproject/MainActivity.kt	(date 1710241108003)
@@ -1,27 +1,57 @@
 package com.project.myproject
 
+import android.app.ActivityOptions
+import android.content.Intent
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import android.widget.Button
 import android.widget.TextView
+import androidx.lifecycle.lifecycleScope
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
 
 class MainActivity : AppCompatActivity() {
+    lateinit var settingPreference: SettingPreference
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
 
         val nameField = findViewById<TextView>(R.id.name)
+        val logoutButton = findViewById<Button>(R.id.logout_button)
+
+        settingPreference = SettingPreference(this)
 
         val extras = intent.extras
+
         if (extras != null) {
             var name = extras.getString("email")
             if (name != null) {
-                name = name.substring(0, name.indexOf('@'))
+                name = name.substringBefore('@')
 
                 val splittedName = name.split('.')
                     .map { it.replaceFirstChar { char -> char.uppercaseChar() } }
 
-                val nameText = getString(R.string.name_placeholder, "${splittedName[0]} ${splittedName[1]}")
-                nameField.text = nameText
+                if (splittedName.size >= 2) {
+                    val nameText = getString(R.string.name_placeholder,
+                        "${splittedName[0]} ${splittedName[1]}")
+                    nameField.text = nameText
+                } else {
+                    val nameText = getString(R.string.name_placeholder, "${splittedName[0]}")
+                    nameField.text = nameText
+                }
+            }
+        }
+
+        logoutButton.setOnClickListener {
+            lifecycleScope.launch {
+                settingPreference.clearData()
+
+                val registerIntent = Intent(this@MainActivity, RegisterActivity::class.java)
+
+                val profileActivityOptions = ActivityOptions.makeSceneTransitionAnimation(this@MainActivity)
+                startActivity(registerIntent, profileActivityOptions.toBundle())
+                finish()
             }
         }
     }
Index: app/src/main/java/com/project/myproject/RegisterActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.myproject\r\n\r\nimport android.app.ActivityOptions\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Patterns\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.android.material.textfield.TextInputLayout\r\n\r\nclass RegisterActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInitialState: Bundle?) {\r\n        super.onCreate(savedInitialState)\r\n        setContentView(R.layout.register_activity)\r\n\r\n        val registerButton = findViewById<Button>(R.id.register_button)\r\n\r\n        val regEmailLayout = findViewById<TextInputLayout>(R.id.reg_email_layout)\r\n        val regEmailInput = findViewById<TextInputEditText>(R.id.reg_email_input)\r\n\r\n        val regPasswordLayout = findViewById<TextInputLayout>(R.id.reg_password_layout)\r\n        val regPasswordInput = findViewById<TextInputEditText>(R.id.reg_password_input)\r\n\r\n        registerButton.setOnClickListener {\r\n            val registerIntent = Intent(this, MainActivity::class.java)\r\n\r\n            val profileActivityOptions = ActivityOptions.makeSceneTransitionAnimation(this)\r\n\r\n            if (regEmailLayout.error == null && regPasswordLayout.error == null) {\r\n                registerIntent.putExtra(\"email\", regEmailInput.text.toString())\r\n                startActivity(registerIntent, profileActivityOptions.toBundle())\r\n            }\r\n        }\r\n\r\n        regEmailInput.addTextChangedListener(object: TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n                // Not used\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                // Not used\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val email = s.toString()\r\n                if (email.isNotEmpty() && !Patterns.EMAIL_ADDRESS.matcher(email).matches()) {\r\n                    regEmailLayout.error = \"Incorrect E-Mail address\"\r\n                } else {\r\n                    regEmailLayout.error = null\r\n                }\r\n            }\r\n        })\r\n\r\n        regPasswordInput.addTextChangedListener(object: TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n                // Not used\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                // Not used\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val passwordRegex = Regex(\"^[a-zA-Z0-9@#\\$%^&+=!]+\\$\")\r\n                val password = s.toString()\r\n                when {\r\n                    password.isNotEmpty() && password.length < 8 -> {\r\n                        regPasswordLayout.error = \"Your password must include a minimum of 8 characters.\"\r\n                    }\r\n                    password.isNotEmpty() && password.length > 16 -> {\r\n                        regPasswordLayout.error = \"Your password must include a maximum of 16 characters.\"\r\n                    }\r\n                    password.isNotEmpty() && passwordRegex.matches(password) -> {\r\n                        regPasswordLayout.error = \"Your password must include only letters, numbers and symbols.\"\r\n                    }\r\n                    else -> {\r\n                        regPasswordLayout.error = null\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/project/myproject/RegisterActivity.kt b/app/src/main/java/com/project/myproject/RegisterActivity.kt
--- a/app/src/main/java/com/project/myproject/RegisterActivity.kt	(revision 4f32134f9d065f134fdd6ae23fac2e1054cc162b)
+++ b/app/src/main/java/com/project/myproject/RegisterActivity.kt	(date 1710241630205)
@@ -8,10 +8,17 @@
 import android.util.Patterns
 import android.widget.Button
 import androidx.appcompat.app.AppCompatActivity
+import androidx.lifecycle.lifecycleScope
 import com.google.android.material.textfield.TextInputEditText
 import com.google.android.material.textfield.TextInputLayout
+import kotlinx.coroutines.flow.firstOrNull
+import kotlinx.coroutines.launch
 
 class RegisterActivity : AppCompatActivity() {
+    private lateinit var settingPreference: SettingPreference
+    private var email: String? = null
+    private var password: String? = null
+
     override fun onCreate(savedInitialState: Bundle?) {
         super.onCreate(savedInitialState)
         setContentView(R.layout.register_activity)
@@ -24,14 +31,22 @@
         val regPasswordLayout = findViewById<TextInputLayout>(R.id.reg_password_layout)
         val regPasswordInput = findViewById<TextInputEditText>(R.id.reg_password_input)
 
+        settingPreference = SettingPreference(this)
+
         registerButton.setOnClickListener {
-            val registerIntent = Intent(this, MainActivity::class.java)
-
-            val profileActivityOptions = ActivityOptions.makeSceneTransitionAnimation(this)
-
             if (regEmailLayout.error == null && regPasswordLayout.error == null) {
-                registerIntent.putExtra("email", regEmailInput.text.toString())
-                startActivity(registerIntent, profileActivityOptions.toBundle())
+
+                lifecycleScope.launch {
+                    val registerIntent = Intent(this@RegisterActivity, MainActivity::class.java)
+                    registerIntent.putExtra("email", regEmailInput.text.toString())
+                    val profileActivityOptions = ActivityOptions.makeSceneTransitionAnimation(this@RegisterActivity)
+
+                    settingPreference.saveEmail(regEmailInput.text.toString())
+                    settingPreference.savePassword(regPasswordInput.text.toString())
+
+                    startActivity(registerIntent, profileActivityOptions.toBundle())
+                    finish()
+                }
             }
         }
 
@@ -83,4 +98,21 @@
             }
         })
     }
+
+    override fun onStart() {
+        super.onStart()
+        lifecycleScope.launch {
+            val email = settingPreference.getEmail().firstOrNull()
+            val password = settingPreference.getPassword().firstOrNull()
+
+            if (!email.isNullOrBlank() && !password.isNullOrBlank()) {
+                val registerIntent = Intent(this@RegisterActivity, MainActivity::class.java)
+                registerIntent.putExtra("email", email)
+                val profileActivityOptions = ActivityOptions.makeSceneTransitionAnimation(this@RegisterActivity)
+
+                startActivity(registerIntent, profileActivityOptions.toBundle())
+                finish()
+            }
+        }
+    }
 }
\ No newline at end of file
Index: app/src/main/res/transition/slide_right.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/transition/slide_right.xml b/app/src/main/res/transition/slide_right.xml
new file mode 100644
--- /dev/null	(date 1710235816574)
+++ b/app/src/main/res/transition/slide_right.xml	(date 1710235816574)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<slide xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="500"
+    android:slideEdge="left"
+    />
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id(\"com.android.application\")\r\n    id(\"org.jetbrains.kotlin.android\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.project.myproject\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.project.myproject\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(\"androidx.core:core-ktx:1.12.0\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    implementation(\"com.google.android.material:material:1.11.0\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 4f32134f9d065f134fdd6ae23fac2e1054cc162b)
+++ b/app/build.gradle.kts	(date 1710236719127)
@@ -34,6 +34,7 @@
 
 dependencies {
 
+    implementation("androidx.datastore:datastore-preferences:1.0.0")
     implementation("androidx.core:core-ktx:1.12.0")
     implementation("androidx.appcompat:appcompat:1.6.1")
     implementation("androidx.constraintlayout:constraintlayout:2.1.4")
Index: app/src/main/java/com/project/myproject/SettingPreference.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/project/myproject/SettingPreference.kt b/app/src/main/java/com/project/myproject/SettingPreference.kt
new file mode 100644
--- /dev/null	(date 1710239472346)
+++ b/app/src/main/java/com/project/myproject/SettingPreference.kt	(date 1710239472346)
@@ -0,0 +1,40 @@
+package com.project.myproject
+
+import android.content.Context
+import androidx.datastore.core.DataStore
+import androidx.datastore.dataStore
+import androidx.datastore.preferences.core.Preferences
+import androidx.datastore.preferences.core.edit
+import androidx.datastore.preferences.core.stringPreferencesKey
+import androidx.datastore.preferences.preferencesDataStore
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+
+class SettingPreference(private val context: Context) {
+
+    companion object {
+        private val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "settings")
+        private val EMAIL_KEY = stringPreferencesKey("EMAIL_KEY")
+        private val PASSWORD_KEY = stringPreferencesKey("PASSWORD_KEY")
+    }
+
+    fun getEmail(): Flow<String> {
+        return context.dataStore.data.map { it[EMAIL_KEY] ?: ""}
+    }
+
+    fun getPassword(): Flow<String> {
+        return context.dataStore.data.map { it[PASSWORD_KEY] ?: ""}
+    }
+
+    suspend fun saveEmail(email: String) {
+        context.dataStore.edit { it[EMAIL_KEY] = email }
+    }
+
+    suspend fun savePassword(password: String) {
+        context.dataStore.edit { it[PASSWORD_KEY] = password }
+    }
+
+    suspend fun clearData() {
+        context.dataStore.edit { it.clear() }
+    }
+}
\ No newline at end of file
